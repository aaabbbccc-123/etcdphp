<?php
/**
 * This is a file generated by protoapi (version.uuzu.com/protoapi)
 * Generated at: 30 Aug 18 11:04 +08
 * DO NOT EDIT.
 */

namespace Yoozoo\Agent;

use Exception;
use GuzzleHttp\Client as HttpClient;

class Error
{
    private $code;

    private $message;

    public function validate(array $response)
    {
        if (isset($response["code"])) {
            $this->code = $response["code"];
        } else {
            throw new Exception("'code' is not exist");
        }
        if (isset($response["message"])) {
            $this->message = $response["message"];
        } else {
            throw new Exception("'message' is not exist");
        }
    }

    public function set_code($code)
    {
        $this->code = $code;
    }

    public function get_code()
    {
        return $this->code;
    }

    public function set_message($message)
    {
        $this->message = $message;
    }

    public function get_message()
    {
        return $this->message;
    }

    public function to_array()
    {
        return [
            "code" => $this->code,

            "message" => $this->message,
        ];
    }
}

class LogonInfoRequest
{
    private $app_token;

    private $env;

    public function validate(array $response)
    {
        if (isset($response["app_token"])) {
            $this->app_token = $response["app_token"];
        } else {
            throw new Exception("'app_token' is not exist");
        }
        if (isset($response["env"])) {
            $this->env = $response["env"];
        } else {
            throw new Exception("'env' is not exist");
        }
    }

    public function set_app_token($app_token)
    {
        $this->app_token = $app_token;
    }

    public function get_app_token()
    {
        return $this->app_token;
    }

    public function set_env($env)
    {
        $this->env = $env;
    }

    public function get_env()
    {
        return $this->env;
    }

    public function to_array()
    {
        return [
            "app_token" => $this->app_token,
            "env" => $this->env,
        ];
    }
}

class LogonInfoReply
{
    private $user;

    private $password;

    private $endpoints;

    private $app_name;

    public function validate(array $response)
    {
        if (isset($response["user"])) {
            $this->user = $response["user"];
        } else {
            throw new Exception("'user' is not exist");
        }
        if (isset($response["password"])) {
            $this->password = $response["password"];
        } else {
            throw new Exception("'password' is not exist");
        }
        if (isset($response["endpoints"])) {
            $this->endpoints = $response["endpoints"];
        } else {
            throw new Exception("'endpoints' is not exist");
        }
        if (isset($response["app_name"])) {
            $this->app_name = $response["app_name"];
        } else {
            throw new Exception("'app_name' is not exist");
        }
    }

    public function set_user($user)
    {
        $this->user = $user;
    }

    public function get_user()
    {
        return $this->user;
    }

    public function set_password($password)
    {
        $this->password = $password;
    }

    public function get_password()
    {
        return $this->password;
    }

    public function set_endpoints($endpoints)
    {
        $this->endpoints = $endpoints;
    }

    public function get_endpoints()
    {
        return $this->endpoints;
    }

    public function set_app_name($app_name)
    {
        $this->app_name = $app_name;
    }

    public function get_app_name()
    {
        return $this->app_name;
    }

    public function to_array()
    {
        return [
            "user" => $this->user,
            "password" => $this->password,
            "endpoints" => $this->endpoints,
            "app_name" => $this->app_name,
        ];
    }
}

class AgentService
{
    protected $httpClient;

    public function __construct($baseUri = '127.0.0.1:57582')
    {
        $this->httpClient = new HttpClient(
            [
                'base_uri' => $baseUri,
                'timeout' => 30,
            ]
        );
    }

    private function callApi($req, $method, $uri, $outputName)
    {
        $data = [
            'json' => $req->to_array(),
        ];
        $response = $this->httpClient->request($method, $uri, $data);
        $rawContent = $response->getBody()->getContents();

        $content = json_decode($rawContent, true);
        if (isset($content["error"])) {
            throw new Exception($content["error"]["message"]);
        }
        if (isset($content["response"])) {
            $result = new $outputName();
            $result->validate($content["response"]);
            return $result;
        } else {
            throw new Exception("Cannot find response body: " . $rawContent);
        }
    }

    public function getLogonInfo(LogonInfoRequest $req)
    {
        return $this->callApi($req, "post", "AgentService.getLogonInfo", __NAMESPACE__ . "\\LogonInfoReply");
    }
}
