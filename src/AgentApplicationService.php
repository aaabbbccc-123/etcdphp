<?php
// This is a file generated by protoapi (version.uuzu.com/protoapi)
// Generated at: 07 Sep 18 17:15 +08
// DO NOT EDIT.

namespace agentApplicationService;

use Yoozoo\ProtoApi;
use MyCLabs\Enum\Enum;

/** Messages **/
class GenericError extends ProtoApi\CommonErrorException implements ProtoApi\Message
{
    protected $message;

    public function init(array $response)
    {
        if (isset($response["message"])) {
            $this->message = $response["message"];
        }
    }

    public function validate()
    {
        if (!isset($this->message)) {
            throw new Protoapi\GeneralException("'message' is not exist");
        }
    }

    public function set_message($message)
    {
        $this->message = $message;
    }

    public function get_message()
    {
        return $this->message;
    }

    public function to_array()
    {
        return array(
            "message" => $this->message,
        );
    }
}

class AuthError extends ProtoApi\CommonErrorException implements ProtoApi\Message
{
    protected $message;

    public function init(array $response)
    {
        if (isset($response["message"])) {
            $this->message = $response["message"];
        }
    }

    public function validate()
    {
        if (!isset($this->message)) {
            throw new Protoapi\GeneralException("'message' is not exist");
        }
    }

    public function set_message($message)
    {
        $this->message = $message;
    }

    public function get_message()
    {
        return $this->message;
    }

    public function to_array()
    {
        return array(
            "message" => $this->message,
        );
    }
}

class BindError extends ProtoApi\CommonErrorException implements ProtoApi\Message
{
    protected $message;

    public function init(array $response)
    {
        if (isset($response["message"])) {
            $this->message = $response["message"];
        }
    }

    public function validate()
    {
        if (!isset($this->message)) {
            throw new Protoapi\GeneralException("'message' is not exist");
        }
    }

    public function set_message($message)
    {
        $this->message = $message;
    }

    public function get_message()
    {
        return $this->message;
    }

    public function to_array()
    {
        return array(
            "message" => $this->message,
        );
    }
}

class ValidateError extends ProtoApi\CommonErrorException implements ProtoApi\Message
{
    protected $errors;

    public function init(array $response)
    {
        if (isset($response["errors"])) {
            $this->errors = array();
            foreach ($response["errors"] as $errors) {
                $tmp = new FieldError();
                $tmp->init($errors);
                $tmp->validate();
                $this->errors[] = $tmp;
            }
        }
    }

    public function validate()
    {
        if (!isset($this->errors)) {
            throw new Protoapi\GeneralException("'errors' is not exist");
        }
    }

    public function set_errors(Errors $errors)
    {
        $this->errors = $errors;
    }

    public function get_errors()
    {
        return $this->errors;
    }

    public function to_array()
    {
        return array(
            "errors" => $this->errors->to_array(),
        );
    }
}

class FieldError implements ProtoApi\Message
{
    protected $fieldName;
    protected $errorType;

    public function init(array $response)
    {
        if (isset($response["fieldName"])) {
            $this->fieldName = $response["fieldName"];
        }
        if (isset($response["errorType"])) {
            $this->errorType = $response["errorType"];
        }
    }

    public function validate()
    {
        if (!isset($this->fieldName)) {
            throw new Protoapi\GeneralException("'fieldName' is not exist");
        }
        if (!isset($this->errorType)) {
            throw new Protoapi\GeneralException("'errorType' is not exist");
        }
    }

    public function set_fieldName($fieldName)
    {
        $this->fieldName = $fieldName;
    }

    public function get_fieldName()
    {
        return $this->fieldName;
    }

    public function set_errorType($errorType)
    {
        $this->errorType = $errorType;
    }

    public function get_errorType()
    {
        return $this->errorType;
    }

    public function to_array()
    {
        return array(
            "fieldName" => $this->fieldName,
            "errorType" => $this->errorType,
        );
    }
}

class LogonInfoRequest implements ProtoApi\Message
{
    protected $app_token;
    protected $env;

    public function init(array $response)
    {
        if (isset($response["app_token"])) {
            $this->app_token = $response["app_token"];
        }
        if (isset($response["env"])) {
            $this->env = $response["env"];
        }
    }

    public function validate()
    {
        if (!isset($this->app_token)) {
            throw new Protoapi\GeneralException("'app_token' is not exist");
        }
        if (!isset($this->env)) {
            throw new Protoapi\GeneralException("'env' is not exist");
        }
    }

    public function set_app_token($app_token)
    {
        $this->app_token = $app_token;
    }

    public function get_app_token()
    {
        return $this->app_token;
    }

    public function set_env($env)
    {
        $this->env = $env;
    }

    public function get_env()
    {
        return $this->env;
    }

    public function to_array()
    {
        return array(
            "app_token" => $this->app_token,
            "env" => $this->env,
        );
    }
}

class LogonInfoResponse implements ProtoApi\Message
{
    protected $user;
    protected $password;
    protected $endpoints;
    protected $app_name;

    public function init(array $response)
    {
        if (isset($response["user"])) {
            $this->user = $response["user"];
        }
        if (isset($response["password"])) {
            $this->password = $response["password"];
        }
        if (isset($response["endpoints"])) {
            $this->endpoints = $response["endpoints"];
        }
        if (isset($response["app_name"])) {
            $this->app_name = $response["app_name"];
        }
    }

    public function validate()
    {
        if (!isset($this->user)) {
            throw new Protoapi\GeneralException("'user' is not exist");
        }
        if (!isset($this->password)) {
            throw new Protoapi\GeneralException("'password' is not exist");
        }
        if (!isset($this->endpoints)) {
            throw new Protoapi\GeneralException("'endpoints' is not exist");
        }
        if (!isset($this->app_name)) {
            throw new Protoapi\GeneralException("'app_name' is not exist");
        }
    }

    public function set_user($user)
    {
        $this->user = $user;
    }

    public function get_user()
    {
        return $this->user;
    }

    public function set_password($password)
    {
        $this->password = $password;
    }

    public function get_password()
    {
        return $this->password;
    }

    public function set_endpoints($endpoints)
    {
        $this->endpoints = $endpoints;
    }

    public function get_endpoints()
    {
        return $this->endpoints;
    }

    public function set_app_name($app_name)
    {
        $this->app_name = $app_name;
    }

    public function get_app_name()
    {
        return $this->app_name;
    }

    public function to_array()
    {
        return array(
            "user" => $this->user,
            "password" => $this->password,
            "endpoints" => $this->endpoints,
            "app_name" => $this->app_name,
        );
    }
}

class LogonError extends ProtoApi\BizErrorException implements ProtoApi\Message
{
    protected $detail;

    public function init(array $response)
    {
        if (isset($response["detail"])) {
            $this->detail = $response["detail"];
        }
    }

    public function validate()
    {
        if (!isset($this->detail)) {
            throw new Protoapi\GeneralException("'detail' is not exist");
        }
    }

    public function set_detail($detail)
    {
        $this->detail = $detail;
    }

    public function get_detail()
    {
        return $this->detail;
    }

    public function to_array()
    {
        return array(
            "detail" => $this->detail,
        );
    }
}

/** Enums **/
class ValidateErrorType extends Enum
{
    const INVALID_EMAIL = 0;
    const FIELD_REQUIRED = 1;
}

class AgentApplicationService
{
    protected $httpClient;

    public function __construct($baseUri = '127.0.0.1:8080')
    {
        $this->httpClient = new ProtoApi\HttpClient(
            array(
                'base_uri' => $baseUri,
                'timeout' => 30,
            )
        );
    }

    public function getLogonInfo(LogonInfoRequest $req)
    {
        $handler = function ($response, $bizerror, $common) {
            if (!empty($response)) {
                $res = new LogonInfoResponse();
                $res->init($response);
                $res->validate();
                return $res;
            } else if (!empty($bizerror)) {
                $bizError = new LogonError();
                $bizError->init($bizerror);
                throw $bizError;
            } else if (!empty($common)) {
                if (isset($common["genericError"])) {
                    $genericError = new GenericError();
                    $genericError->init($common["genericError"]);
                    throw $genericError;
                } else if (isset($common["authError"])) {
                    $authError = new AuthError();
                    $authError->init($common["authError"]);
                    throw $authError;
                } else if (isset($common["validateError"])) {
                    $validateError = new ValidateError();
                    $validateError->init($common["validateError"]);
                    throw $validateError;
                } else if (isset($common["bindError"])) {
                    $bindError = new BindError();
                    $bindError->init($common["bindError"]);
                    throw $bindError;
                } else {
                    throw new ProtoApi\GeneralException("Unknown common error type: ".$response);
                }
            }
            throw new ProtoApi\GeneralException("No data returned.");
        };

        return $this->httpClient->callApi($req, "post", "AgentApplicationService.getLogonInfo", $handler);
    }
}
